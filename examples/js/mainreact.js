// main.js
var $ = require('jquery');
var React = require('react');
var ReactDOM = require('react-dom');

//todowawa: check bootstrap!!!
//todowawa: beware of automatic semi colon insertion, so put every curly brace on the same lineHeight
//todowawa: convert 4 spaces to 2 spaces
//todowawa: clear points and walls when image changes
//todowawa: check performance of recreating the parametric stuff every time

function getDistance(point, point2) {
  return Math.sqrt(Math.pow(point.x - point2.x, 2) + Math.pow(point.y - point2.y, 2));
}

function getIntersection(parametricLine, parametricLine2) {
  //http://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect
  var r = {x: parametricLine2.x1 - parametricLine2.x0, y: parametricLine2.y1 - parametricLine2.y0};
  var s = {x: parametricLine.x1 - parametricLine.x0, y: parametricLine.y1 - parametricLine.y0};
  var res = r.x * s.y - r.y * s.x;
  if(res == 0) {
    // lines are parallel
    return null;
  } else {
    var t = (parametricLine.x0 - parametricLine2.x0) * s.y - (parametricLine.y0 - parametricLine2.y0)  * s.x / res;
    var t = (parametricLine.x0 - parametricLine2.x0) * s.y - (parametricLine.y0 - parametricLine2.y0)  * s.x / res;
    
    return {x: parametricLine2.x0 + t*r.x, y: parametricLine2.y0 + t*r.y};
  }    
}

function getParametricLine(point, point2) {
  var line = {x0: point.x, y0: point.y, x1: point2.x, y1: point2.y};
  line.y1my0 = line.y1 - line.y0;
  line.x1mx0 = line.x1 - line.x0;
  line.x0y1 = line.x0 * line.y1;
  line.x1y0 = line.x1 * line.y0;
  line.norm = Math.sqrt(Math.pow(line.x1mx0, 2) + Math.pow(line.y1my0, 2));
  line.normPow = Math.pow(line.x1mx0, 2) + Math.pow(line.y1my0, 2);
  
  return line;
}

var CommentList = React.createClass({
  getInitialState: function() {
      return {stuff: []};
  },
  loadLoop: function()
  {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
          this.setState({stuff: data});
      }.bind(this),
      error: function(xhr, status, err) {
          console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment)
  {
      var comments = this.state.stuff;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({stuff: newComments});
    /*$.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({stuff: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });*/
  },
  componentDidMount: function()
  {
      this.loadLoop();
      setInterval(this.loadLoop, this.props.pollInterval);
  },
  render: function()
  {
      var comments = [];
      this.state.stuff.forEach(function(data) {
         comments.push(<CommentBox key={data.id} teststuff={data.name}>{data.text}</CommentBox>); 
      });
    return <div><CommentForm onCommentSent={this.handleCommentSubmit} />{comments}</div>;
  }
});

var CommentBox = React.createClass({
  render: function() {
      return (<h1>{this.props.teststuff}. {this.props.children}</h1>);
  }
});

var CommentForm = React.createClass({
    handleSubmit: function(e)
    {
      e.preventDefault();
      var name = this.refs.name.value.trim();
      var email = this.refs.email.value.trim();
      if(!name || !email)
          return;
      
      this.props.onCommentSent({id: 4, name: name, text: email});
      this.refs.name.value = '';
      this.refs.email.value = '';
      
      return;
    },
   render: function() {
     return (<form onSubmit={this.handleSubmit}>
               <input type="text" ref="name" placeholder="Your name" />
               <input type="text" ref="email" placeholder="Your email" />
               <input type="submit" value="Send" />
            </form>);
   }   
});


var Graphic = React.createClass({ 

  componentDidMount: function() {
    var context = this.getDOMNode().getContext('2d');
    this.paint(context);
  },

  componentDidUpdate: function() {
    var context = this.getDOMNode().getContext('2d');
    context.clearRect(0, 0, 200, 200);
    this.paint(context);
  },

  paint: function(context) {
    context.save();
    context.translate(100, 100);
    context.rotate(this.props.rotation, 100, 100);
    context.fillStyle = '#F00';
    context.fillRect(-50, -50, 100, 100);
    context.restore();
  },

  render: function() {
      console.error('render', 'render', 'render');
    return <canvas width={200} height={200} id={this.props.rotation} />;
  }

});

var App = React.createClass({

  getInitialState: function() {
    return { rotation: 0 };
  },

  componentDidMount: function() {
    requestAnimationFrame(this.tick);
  },

  tick: function() {
    this.setState({ rotation: this.state.rotation + .01 });
    requestAnimationFrame(this.tick);
  },

  render: function() {
    return <div><Graphic rotation={this.state.rotation} /></div>
  }

});


var MainComponent = React.createClass({
   getInitialState: function()
   {
        return {image: null, walls: []};
   },
   setImage: function(url)
   {
     this.setState({image: url});  
   },
   addPoint: function(point)
   {
     var newState = $.extend({}, this.state);
     if(newState.walls.length == 0)
     {
         newState.walls.push({id: 1, points: []});
     }
     
     var wall = newState.walls[newState.walls.length - 1];
     
     wall.points.push({id: wall.points.length + 1, x: point.x, y: point.y});
     if(wall.points.length > 1 && wall.points[0].x == wall.points[wall.points.length - 1].x && wall.points[0].y == wall.points[wall.points.length - 1].y)
     {
       // contour is done
       newState.walls.push({id: newState.walls.length + 1, points: []});
     }
     
     this.setState(newState);
   },
   render: function()
   {
       return <div>
                <CanvasComponent image={this.state.image} walls={this.state.walls} addPoint={this.addPoint} />
                <DropZoneComponent setImage={this.setImage} />
              </div>;
   }
});

var DropZoneComponent = React.createClass({
   onDragOver: function(e) {
     e.stopPropagation();
     e.preventDefault();
     e.dataTransfer.dropEffect = 'copy';
   },
   onDrop: function(e) {
     e.stopPropagation();
     e.preventDefault();
     
     var files = e.dataTransfer.files;
     if(files.length == 1) {
       for (var i = 0; i < files.length; i++) {
         if (!files[i].type.match('image.*')) {
           continue;
         }
       
         this.props.setImage(URL.createObjectURL(files[i]));
       }
     }
   },
   render: function() {
       return <div onDragOver={this.onDragOver} onDrop={this.onDrop}>{"Drop files here"}</div>;
   }
});

var CanvasComponent = React.createClass({
   mousePosition : {x : -1, y : -1},
   width: 500,
   height: 500,
   onClick : function(e)
   {
       this.props.addPoint(this.mousePosition);
   },
   guideLines : [],
   guidePoints : [],
   onMouseMove : function(e)
   {
     var offset =  $(this.refs.planCanvas).offset();
     var relativeX = (e.pageX - offset.left);
     var relativeY = (offset.top - e.pageY) * -1;
    
     this.contextCursor.clearRect(0, 0, this.refs.cursorCanvas.width, this.refs.cursorCanvas.height);
    
     // compute the best mousePosition with snapping
     var point = {x: relativeX, y: relativeY};
     if(this.props.walls.length > 0) {
       var wall = this.props.walls[this.props.walls.length - 1];
       // todo: 6 is the magic number...
       if(wall.points.length > 1 && getDistance(wall.points[0], {x: relativeX, y: relativeY}) < 6) {
         point = wall.points[0];
       } else {
         if(e.ctrlKey) {
           // check if it's close to a guide line or guide point???
           var minDist = -1;
           var closestPoint = null;
           for(var i = 0; i < this.guidePoints.length; i++) {
             var dist = getDistance(point, this.guidePoints[i]);
             if(dist < 6 && (minDist == -1 || dist < minDist)) {
               // todo: 6 is the magic number again...
               closestPoint = this.guidePoints[i];
               minDist = dist;
             }
           }
           if(closestPoint != null) {
             point = closestPoint;
           }
         }
       }
       
       if(wall.points.length > 0) {
         this.contextCursor.save();
         this.contextCursor.setLineDash([2, 2]);
         this.contextCursor.lineWidth = "1";
         this.contextCursor.beginPath();
         this.contextCursor.moveTo(wall.points[wall.points.length - 1].x, wall.points[wall.points.length - 1].y);
         this.contextCursor.lineTo(point.x, point.y);
         this.contextCursor.strokeStyle = 'lightgray';
         this.contextCursor.stroke();
         this.contextCursor.restore();
       }
     }
     
     // draw cursor
     this.contextCursor.save();
     this.contextCursor.lineWidth = "2";
     this.contextCursor.strokeStyle = 'green';
     this.contextCursor.beginPath();
     this.contextCursor.moveTo(point.x, point.y - 5);
     this.contextCursor.lineTo(point.x, point.y + 5);
     this.contextCursor.stroke();
     this.contextCursor.beginPath();
     this.contextCursor.moveTo(point.x - 5, point.y);
     this.contextCursor.lineTo(point.x + 5, point.y);
     this.contextCursor.stroke();
     this.contextCursor.restore();
     
     this.mousePosition = point;
   },
   componentDidMount: function() {
     this.context = this.refs.planCanvas.getContext("2d");  
     this.contextBackground = this.refs.backgroundCanvas.getContext("2d");  
     this.contextCursor = this.refs.cursorCanvas.getContext("2d");  
   },
   componentDidUpdate: function() {
     this.context = this.refs.planCanvas.getContext("2d");  
     this.contextBackground = this.refs.backgroundCanvas.getContext("2d");  
     
     if(this.loadedImage) {
         this.contextBackground.clearRect(0, 0, this.refs.backgroundCanvas.width, this.refs.backgroundCanvas.height);
         this.contextBackground.drawImage(this.loadedImage, 0, 0);
         this.loadedImage = null;
     }
   },
   drawPoint: function (point, color, context) {
     context.save();
     context.lineWidth = "1";
     context.beginPath();
     context.arc(point.x, point.y, 3, 0, 2 * Math.PI, false);
     context.fillStyle = color;
     context.fill();
     context.restore();
   },
   drawLine: function(wall, color) {
     this.context.save();
     this.context.beginPath();
     this.context.lineWidth = "1";
     this.context.strokeStyle = color;
     for(var j = 0; j < wall.points.length; j++) {
       if(j == 0) {
         this.context.moveTo(wall.points[j].x, wall.points[j].y);
       } else {
         this.context.lineTo(wall.points[j].x, wall.points[j].y);  
       }
     }
     this.context.stroke();
     this.context.restore();
   },
   shouldComponentUpdate: function(nextProps, nextState) {
     if(nextProps.image !== this.props.image) {
       var img = new Image();
       img.src = nextProps.image;
       var imgLoad = function() {
         this.loadedImage = img;
         this.width = img.width;
         this.height = img.height;
         
         // only rerender when the image is loaded
         this.forceUpdate();            
       }
       img.onload = imgLoad.bind(this);
     } else {
       // todo: this won't work for when we drag a point or something... We can't recompute all parametric lines everytime it changes... Only set state on mouse up??? Maybe...
       
       this.guideLines = [];
       this.guidePoints = [];
       
       // draw the points. right now we redraw everything.
       this.context.clearRect(0, 0, this.refs.backgroundCanvas.width, this.refs.backgroundCanvas.height);
       for(var i = 0; i < this.props.walls.length; i++) {
         var wall = this.props.walls[i];
         
         for(var j = 0; j < wall.points.length; j++) {
           this.drawPoint(wall.points[j], 'gray', this.context);
           
           // todo: do not create collinear lines
           if(j > 0) {
             this.guideLines.push(getParametricLine(wall.points[j - 1], wall.points[j]));
           }
           this.guideLines.push(getParametricLine(wall.points[j], {x: wall.points[j].x + 1, y: wall.points[j].y}));
           this.guideLines.push(getParametricLine(wall.points[j], {x: wall.points[j].x, y: wall.points[j].y + 1}));
         }
         
         this.drawLine(wall, 'gray');
       }
       
       for(var i = 1; i < this.guideLines.length; i++) {
         for(var j = 0; j < i; j++) {
           var point = getIntersection(this.guideLines[i], this.guideLines[j]);
           if(point != null) {
             this.guidePoints.push(point);
           }
         }
       }
     }
     return false;
   },
   render: function() {
       return <div className="canvasContainer" style={{width: this.width + "px", height: this.height + "px"}}>
                <canvas ref="backgroundCanvas" width={this.width} height={this.height} style={{width: this.width + "px", height: this.height + "px"}} />
                <canvas ref="planCanvas" width={this.width} height={this.height} style={{width: this.width + "px", height: this.height + "px"}} />
                <canvas ref="cursorCanvas" width={this.width} height={this.height} style={{width: this.width + "px", height: this.height + "px"}} onMouseMove={this.onMouseMove} onClick={this.onClick} />
              </div>;
   }
});

ReactDOM.render(
  <MainComponent />,
  document.getElementById('example')
);